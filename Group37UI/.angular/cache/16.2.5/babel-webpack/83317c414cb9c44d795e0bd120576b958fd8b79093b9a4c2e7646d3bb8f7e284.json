{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nconst oAuthConfig = {\n  issuer: 'https://accounts.google.com',\n  strictDiscoveryDocumentValidation: false,\n  redirectUri: window.location.origin,\n  clientId: '664760953066-u4vee7n6kt6ieqrhdegq8tqb3ur96n2j.apps.googleusercontent.com',\n  scope: 'openid profile email'\n};\nexport class AuthService {\n  constructor(oAuthService) {\n    this.oAuthService = oAuthService;\n    oAuthService.configure(oAuthConfig);\n    oAuthService.logoutUrl = 'https://www.google.com/accounts/Logout';\n    oAuthService.loadDiscoveryDocument().then(() => {\n      oAuthService.tryLoginImplicitFlow().then(() => {\n        if (!oAuthService.hasValidAccessToken()) {\n          oAuthService.initLoginFlow();\n          oAuthService.loadUserProfile().then(userProfile => {\n            this.userInfo = userProfile;\n          });\n        } else {\n          oAuthService.loadUserProfile().then(userProfile => {\n            this.userInfo = userProfile;\n          });\n        }\n      });\n    });\n  }\n  isLoggedIn() {\n    return this.oAuthService.hasValidAccessToken();\n  }\n  signOut() {\n    this.oAuthService.logOut();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.OAuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["oAuthConfig","issuer","strictDiscoveryDocumentValidation","redirectUri","window","location","origin","clientId","scope","AuthService","constructor","oAuthService","configure","logoutUrl","loadDiscoveryDocument","then","tryLoginImplicitFlow","hasValidAccessToken","initLoginFlow","loadUserProfile","userProfile","userInfo","isLoggedIn","signOut","logOut","_","i0","ɵɵinject","i1","OAuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Utkarsh-PC\\Desktop\\Group37UI\\Group37UI\\src\\app\\services\\Auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { AuthConfig, OAuthService } from \"angular-oauth2-oidc\";\n\nconst oAuthConfig:AuthConfig={\n  issuer:'https://accounts.google.com',\n  strictDiscoveryDocumentValidation:false,\n  redirectUri: window.location.origin,\n  clientId:'664760953066-u4vee7n6kt6ieqrhdegq8tqb3ur96n2j.apps.googleusercontent.com',\n  scope:'openid profile email'\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n\n  userInfo!: User;\n\n  constructor(public readonly oAuthService:OAuthService) {\n    oAuthService.configure(oAuthConfig);\n    oAuthService.logoutUrl = 'https://www.google.com/accounts/Logout';\n    oAuthService.loadDiscoveryDocument().then(()=>{\n      oAuthService.tryLoginImplicitFlow().then(()=>{\n        if(!oAuthService.hasValidAccessToken()){\n          oAuthService.initLoginFlow();\n          oAuthService.loadUserProfile().then((userProfile)=>{\n            this.userInfo = userProfile as User;\n          })\n        }else{\n          oAuthService.loadUserProfile().then((userProfile)=>{\n            this.userInfo = userProfile as User;\n          })\n        }\n      })\n    })\n  }\n\n  isLoggedIn():boolean{\n    return this.oAuthService.hasValidAccessToken();\n  }\n\n  signOut(){\n    this.oAuthService.logOut();\n  }\n\n}\n\nexport interface User {\n  info: {\n    at_hash: string;\n    aud: string;\n    azp: string;\n    email: string;\n    email_verified: boolean;\n    exp: number;\n    family_name: string;\n    given_name: string;\n    iat: number;\n    iss: string;\n    jti: string;\n    locale: string;\n    name: string;\n    nbf: number;\n    nonce: string;\n    picture: string;\n    sub: string;\n  };\n}\n\n\n"],"mappings":";;AAGA,MAAMA,WAAW,GAAY;EAC3BC,MAAM,EAAC,6BAA6B;EACpCC,iCAAiC,EAAC,KAAK;EACvCC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM;EACnCC,QAAQ,EAAC,0EAA0E;EACnFC,KAAK,EAAC;CACP;AAKD,OAAM,MAAOC,WAAW;EAItBC,YAA4BC,YAAyB;IAAzB,KAAAA,YAAY,GAAZA,YAAY;IACtCA,YAAY,CAACC,SAAS,CAACZ,WAAW,CAAC;IACnCW,YAAY,CAACE,SAAS,GAAG,wCAAwC;IACjEF,YAAY,CAACG,qBAAqB,EAAE,CAACC,IAAI,CAAC,MAAI;MAC5CJ,YAAY,CAACK,oBAAoB,EAAE,CAACD,IAAI,CAAC,MAAI;QAC3C,IAAG,CAACJ,YAAY,CAACM,mBAAmB,EAAE,EAAC;UACrCN,YAAY,CAACO,aAAa,EAAE;UAC5BP,YAAY,CAACQ,eAAe,EAAE,CAACJ,IAAI,CAAEK,WAAW,IAAG;YACjD,IAAI,CAACC,QAAQ,GAAGD,WAAmB;UACrC,CAAC,CAAC;SACH,MAAI;UACHT,YAAY,CAACQ,eAAe,EAAE,CAACJ,IAAI,CAAEK,WAAW,IAAG;YACjD,IAAI,CAACC,QAAQ,GAAGD,WAAmB;UACrC,CAAC,CAAC;;MAEN,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACX,YAAY,CAACM,mBAAmB,EAAE;EAChD;EAEAM,OAAOA,CAAA;IACL,IAAI,CAACZ,YAAY,CAACa,MAAM,EAAE;EAC5B;EAAC,QAAAC,CAAA,G;qBA7BUhB,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}