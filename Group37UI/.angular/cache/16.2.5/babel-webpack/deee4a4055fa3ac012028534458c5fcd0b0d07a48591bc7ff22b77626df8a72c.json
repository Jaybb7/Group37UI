{"ast":null,"code":"import { Observable } from 'rxjs';\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\nexport class SocialDataService {\n  constructor() {\n    this.backendApiUrl = 'https://your-backend-api-url'; // Replace with your backend API URL\n  }\n  // Fetch user profile from the backend or use dummy data\n  getUserProfile() {\n    return new Observable(observer => {\n      axios.get(`${this.backendApiUrl}/user-profile`).then(response => {\n        observer.next(response.data);\n      }).catch(() => {\n        // If the API request fails, provide dummy data\n        observer.next({\n          name: 'John Doe',\n          bio: 'This is a sample bio',\n          friends: ['Friend 1', 'Friend 2']\n        });\n      });\n    });\n  }\n  // Fetch posts from the backend or use dummy data\n  getPosts() {\n    return new Observable(observer => {\n      axios.get(`${this.backendApiUrl}/posts`).then(response => {\n        observer.next(response.data);\n      }).catch(() => {\n        // If the API request fails, provide dummy data\n        observer.next([{\n          authorName: 'John Doe',\n          authorImage: 'profile-image-url',\n          content: 'This is a sample post content...'\n        }, {\n          authorName: 'Jane Smith',\n          authorImage: 'profile-image-url',\n          content: 'Another dummy post...'\n        }, {\n          authorName: 'Alice Johnson',\n          authorImage: 'profile-image-url',\n          content: 'Yet another post...'\n        }, {\n          authorName: 'Bob Anderson',\n          authorImage: 'profile-image-url',\n          content: 'Sample post by Bob...'\n        }, {\n          authorName: 'Eva Davis',\n          authorImage: 'profile-image-url',\n          content: 'A post from Eva...'\n        }\n        // Add more dummy posts here\n        ]);\n      });\n    });\n  }\n  static #_ = this.ɵfac = function SocialDataService_Factory(t) {\n    return new (t || SocialDataService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocialDataService,\n    factory: SocialDataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Observable","axios","SocialDataService","constructor","backendApiUrl","getUserProfile","observer","get","then","response","next","data","catch","name","bio","friends","getPosts","authorName","authorImage","content","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Utkarsh-PC\\Desktop\\Group37UI\\Group37UI\\src\\app\\social\\social-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport axios from 'axios';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SocialDataService {\r\n  private backendApiUrl = 'https://your-backend-api-url'; // Replace with your backend API URL\r\n\r\n  constructor() {}\r\n\r\n  // Fetch user profile from the backend or use dummy data\r\n  getUserProfile(): Observable<any> {\r\n    return new Observable<any>((observer:any) => {\r\n      axios\r\n        .get(`${this.backendApiUrl}/user-profile`)\r\n        .then((response) => {\r\n          observer.next(response.data);\r\n        })\r\n        .catch(() => {\r\n          // If the API request fails, provide dummy data\r\n          observer.next({ name: 'John Doe', bio: 'This is a sample bio', friends: ['Friend 1', 'Friend 2'] });\r\n        });\r\n    });\r\n  }\r\n\r\n  // Fetch posts from the backend or use dummy data\r\n  getPosts(): Observable<any[]> {\r\n    return new Observable<any[]>((observer:any) => {\r\n      axios\r\n        .get(`${this.backendApiUrl}/posts`)\r\n        .then((response) => {\r\n          observer.next(response.data);\r\n        })\r\n        .catch(() => {\r\n          // If the API request fails, provide dummy data\r\n          observer.next([\r\n            {\r\n              authorName: 'John Doe',\r\n              authorImage: 'profile-image-url',\r\n              content: 'This is a sample post content...',\r\n            },\r\n            {\r\n              authorName: 'Jane Smith',\r\n              authorImage: 'profile-image-url',\r\n              content: 'Another dummy post...',\r\n            },\r\n            {\r\n              authorName: 'Alice Johnson',\r\n              authorImage: 'profile-image-url',\r\n              content: 'Yet another post...',\r\n            },\r\n            {\r\n              authorName: 'Bob Anderson',\r\n              authorImage: 'profile-image-url',\r\n              content: 'Sample post by Bob...',\r\n            },\r\n            {\r\n              authorName: 'Eva Davis',\r\n              authorImage: 'profile-image-url',\r\n              content: 'A post from Eva...',\r\n            },\r\n            // Add more dummy posts here\r\n          ]);\r\n        });\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,UAAU,QAAY,MAAM;AACrC,OAAOC,KAAK,MAAM,OAAO;;AAKzB,OAAM,MAAOC,iBAAiB;EAG5BC,YAAA;IAFQ,KAAAC,aAAa,GAAG,8BAA8B,CAAC,CAAC;EAEzC;EAEf;EACAC,cAAcA,CAAA;IACZ,OAAO,IAAIL,UAAU,CAAOM,QAAY,IAAI;MAC1CL,KAAK,CACFM,GAAG,CAAC,GAAG,IAAI,CAACH,aAAa,eAAe,CAAC,CACzCI,IAAI,CAAEC,QAAQ,IAAI;QACjBH,QAAQ,CAACI,IAAI,CAACD,QAAQ,CAACE,IAAI,CAAC;MAC9B,CAAC,CAAC,CACDC,KAAK,CAAC,MAAK;QACV;QACAN,QAAQ,CAACI,IAAI,CAAC;UAAEG,IAAI,EAAE,UAAU;UAAEC,GAAG,EAAE,sBAAsB;UAAEC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU;QAAC,CAAE,CAAC;MACrG,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;EAEA;EACAC,QAAQA,CAAA;IACN,OAAO,IAAIhB,UAAU,CAASM,QAAY,IAAI;MAC5CL,KAAK,CACFM,GAAG,CAAC,GAAG,IAAI,CAACH,aAAa,QAAQ,CAAC,CAClCI,IAAI,CAAEC,QAAQ,IAAI;QACjBH,QAAQ,CAACI,IAAI,CAACD,QAAQ,CAACE,IAAI,CAAC;MAC9B,CAAC,CAAC,CACDC,KAAK,CAAC,MAAK;QACV;QACAN,QAAQ,CAACI,IAAI,CAAC,CACZ;UACEO,UAAU,EAAE,UAAU;UACtBC,WAAW,EAAE,mBAAmB;UAChCC,OAAO,EAAE;SACV,EACD;UACEF,UAAU,EAAE,YAAY;UACxBC,WAAW,EAAE,mBAAmB;UAChCC,OAAO,EAAE;SACV,EACD;UACEF,UAAU,EAAE,eAAe;UAC3BC,WAAW,EAAE,mBAAmB;UAChCC,OAAO,EAAE;SACV,EACD;UACEF,UAAU,EAAE,cAAc;UAC1BC,WAAW,EAAE,mBAAmB;UAChCC,OAAO,EAAE;SACV,EACD;UACEF,UAAU,EAAE,WAAW;UACvBC,WAAW,EAAE,mBAAmB;UAChCC,OAAO,EAAE;;QAEX;QAAA,CACD,CAAC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBA5DUlB,iBAAiB;EAAA;EAAA,QAAAmB,EAAA,G;WAAjBnB,iBAAiB;IAAAoB,OAAA,EAAjBpB,iBAAiB,CAAAqB,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}